diff --git a/include/spdk/nvme.h b/include/spdk/nvme.h
index 4157292da..d6a374ef1 100644
--- a/include/spdk/nvme.h
+++ b/include/spdk/nvme.h
@@ -1398,6 +1398,20 @@ void spdk_nvme_ctrlr_register_aer_callback(struct spdk_nvme_ctrlr *ctrlr,
  */
 struct spdk_nvme_qpair;
 
+
+/**
+ * Setup qpair for use with shenango
+ *
+ * @qpair - the qpair to setup
+ * @cq_head_out - used to return the memory address of the internal completion
+ * queue head variable
+ * @shadow_ptr - address of memory location that SPDK will update when advancing
+ * cq_head
+ */
+void nvme_setup_shenango(struct spdk_nvme_qpair *qpair, uint32_t **cq_head_out,
+	                     uint32_t *shadow_ptr);
+
+
 /**
  * Signature for the callback function invoked when a timeout is detected on a
  * request.
diff --git a/lib/env_dpdk/env.mk b/lib/env_dpdk/env.mk
index d3d46af73..f73446e02 100644
--- a/lib/env_dpdk/env.mk
+++ b/lib/env_dpdk/env.mk
@@ -45,7 +45,7 @@ export DPDK_ABS_DIR = $(abspath $(DPDK_DIR))
 ifneq ($(CONFIG_DPDK_LIB_DIR),)
 DPDK_LIB_DIR = $(CONFIG_DPDK_LIB_DIR)
 else
-DPDK_LIB_DIR = $(DPDK_ABS_DIR)/lib
+DPDK_LIB_DIR = $(DPDK_ABS_DIR)/lib/x86_64-linux-gnu
 endif
 
 ifneq ($(CONFIG_DPDK_INC_DIR),)
diff --git a/lib/nvme/nvme_pcie.c b/lib/nvme/nvme_pcie.c
index 14f563532..f2487b84c 100644
--- a/lib/nvme/nvme_pcie.c
+++ b/lib/nvme/nvme_pcie.c
@@ -1122,6 +1122,15 @@ static struct spdk_pci_id nvme_pci_driver_id[] = {
 SPDK_PCI_DRIVER_REGISTER(nvme, nvme_pci_driver_id,
 			 SPDK_PCI_DRIVER_NEED_MAPPING | SPDK_PCI_DRIVER_WC_ACTIVATE);
 
+void nvme_setup_shenango(struct spdk_nvme_qpair *qpair, uint32_t **cq_head_out,
+	                     uint32_t *shadow_ptr)
+{
+	struct nvme_pcie_qpair *pqpair = nvme_pcie_qpair(qpair);
+	*cq_head_out = &pqpair->cq_head_nowrap;
+	pqpair->shadow_head = shadow_ptr;
+	*pqpair->shadow_head = pqpair->cq_head_nowrap;
+}
+
 const struct spdk_nvme_transport_ops pcie_ops = {
 	.name = "PCIE",
 	.type = SPDK_NVME_TRANSPORT_PCIE,
diff --git a/lib/nvme/nvme_pcie_common.c b/lib/nvme/nvme_pcie_common.c
index a63f1df65..863c147fe 100644
--- a/lib/nvme/nvme_pcie_common.c
+++ b/lib/nvme/nvme_pcie_common.c
@@ -71,6 +71,8 @@ nvme_pcie_qpair_reset(struct spdk_nvme_qpair *qpair)
 
 	/* all head/tail vals are set to 0 */
 	pqpair->last_sq_tail = pqpair->sq_tail = pqpair->sq_head = pqpair->cq_head = 0;
+	pqpair->cq_head_nowrap = pqpair->num_entries;
+	*pqpair->shadow_head = pqpair->num_entries;
 
 	/*
 	 * First time through the completion queue, HW will set phase
@@ -251,6 +253,10 @@ nvme_pcie_qpair_construct(struct spdk_nvme_qpair *qpair,
 		TAILQ_INSERT_HEAD(&pqpair->free_tr, tr, tq_list);
 	}
 
+
+	/* map shadow_head to to cq_head_nowrap for init */
+	pqpair->shadow_head = &pqpair->cq_head_nowrap;
+
 	nvme_pcie_qpair_reset(qpair);
 
 	return 0;
@@ -968,6 +974,10 @@ nvme_pcie_qpair_process_completions(struct spdk_nvme_qpair *qpair, uint32_t max_
 		}
 	}
 
+	/* update CQ head visible to runtime and iokernel */
+	pqpair->cq_head_nowrap += num_completions;
+	*pqpair->shadow_head = pqpair->cq_head_nowrap;
+
 	if (num_completions > 0) {
 		pqpair->stat->completions += num_completions;
 		nvme_pcie_qpair_ring_cq_doorbell(qpair);
diff --git a/lib/nvme/nvme_pcie_internal.h b/lib/nvme/nvme_pcie_internal.h
index 0849aaae9..440d590aa 100644
--- a/lib/nvme/nvme_pcie_internal.h
+++ b/lib/nvme/nvme_pcie_internal.h
@@ -213,6 +213,9 @@ struct nvme_pcie_qpair {
 		volatile uint32_t *cq_eventidx;
 	} shadow_doorbell;
 
+	uint32_t cq_head_nowrap;
+	volatile uint32_t *shadow_head;
+
 	/*
 	 * Fields below this point should not be touched on the normal I/O path.
 	 */
diff --git a/scripts/setup.sh b/scripts/setup.sh
index 26414087a..4f8354cf6 100755
--- a/scripts/setup.sh
+++ b/scripts/setup.sh
@@ -849,7 +849,7 @@ if [[ $os == Linux ]]; then
 	: ${NRHUGE=$(((HUGEMEM + HUGEPGSZ_MB - 1) / HUGEPGSZ_MB))}
 
 	if [ "$mode" == "config" ]; then
-		configure_linux
+		configure_linux_pci
 	elif [ "$mode" == "cleanup" ]; then
 		cleanup_linux
 		clear_hugepages
