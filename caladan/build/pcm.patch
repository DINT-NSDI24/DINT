From 1c2f7e628cbd5df5998b7f4998757c040c7bae5d Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Wed, 25 May 2022 01:15:32 -0400
Subject: [PATCH] PCM for caladan

---
 CMakeLists.txt      |  2 +-
 src/CMakeLists.txt  |  2 +-
 src/cpucounters.cpp | 12 ++++++++----
 src/cpucounters.h   |  3 ++-
 src/pcm-caladan.cpp | 33 +++++++++++++++++++++++++++++++++
 5 files changed, 45 insertions(+), 7 deletions(-)
 create mode 100644 src/pcm-caladan.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7abc2a6..8733031 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -41,7 +41,7 @@ if(UNIX)  # APPLE, LINUX, FREE_BSD
     set (PCM_COMMON_FLAGS "-Wno-unknown-pragmas -fPIC")
 
     if(LINUX)
-       set (PCM_COMMON_FLAGS "${PCM_COMMON_FLAGS} -Wextra -DPCM_USE_PERF")
+       set (PCM_COMMON_FLAGS "${PCM_COMMON_FLAGS} -Wextra -DPCM_USE_PCI_MM_LINUX -DPCM_SILENT")
     endif(LINUX)
 
     # adding the required PCM common flags
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 8c86c5c..d60b7c3 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -13,7 +13,7 @@
 # All pcm-* executables
 set(PROJECT_NAMES pcm pcm-numa pcm-latency pcm-power pcm-msr pcm-memory pcm-tsx pcm-pcie pcm-core pcm-iio pcm-lspci pcm-pcicfg pcm-mmio pcm-raw)
 
-file(GLOB COMMON_SOURCES msr.cpp cpucounters.cpp pci.cpp mmio.cpp bw.cpp utils.cpp topology.cpp debug.cpp threadpool.cpp)
+file(GLOB COMMON_SOURCES msr.cpp cpucounters.cpp pci.cpp mmio.cpp bw.cpp utils.cpp topology.cpp debug.cpp threadpool.cpp pcm-caladan.cpp)
 file(GLOB UNUX_SOURCES dashboard.cpp resctrl.cpp)
 
 if(UNIX)  # LINUX, FREE_BSD, APPLE
diff --git a/src/cpucounters.cpp b/src/cpucounters.cpp
index 4bc2477..b98d4d9 100644
--- a/src/cpucounters.cpp
+++ b/src/cpucounters.cpp
@@ -1920,6 +1920,7 @@ void PCM::initUncorePMUsDirect()
         }
     }
 
+#if 0
     if (hasPCICFGUncore() && MSR.size())
     {
         cboPMUs.resize(num_sockets);
@@ -1954,6 +1955,7 @@ void PCM::initUncorePMUsDirect()
             }
         }
     }
+#endif
 }
 
 #ifdef PCM_USE_PERF
@@ -2164,7 +2166,7 @@ PCM::PCM() :
         printDetailedSystemTopology();
     }
 
-    initEnergyMonitoring();
+    // initEnergyMonitoring();
 
 #ifndef PCM_SILENT
     std::cerr << "\n";
@@ -2172,7 +2174,7 @@ PCM::PCM() :
 
     initUncoreObjects();
 
-    initRDT();
+    // initRDT();
 
     readCPUMicrocodeLevel();
 
@@ -2181,10 +2183,12 @@ PCM::PCM() :
     perfEventHandle.resize(num_cores, std::vector<int>(PERF_MAX_COUNTERS, -1));
 #endif
 
+#if 0
     for (int32 i = 0; i < num_cores; ++i)
     {
         coreTaskQueues.push_back(std::make_shared<CoreTaskQueue>(i));
     }
+#endif
 
 #ifndef PCM_SILENT
     std::cerr << "\n";
@@ -6142,7 +6146,7 @@ void ServerPCICFGUncore::initDirect(uint32 socket_, const PCM * pcm)
                         std::make_shared<PCICFGRegister32>(handle, XPF_MC_CH_PCI_PMON_CTL1_ADDR),
                         std::make_shared<PCICFGRegister32>(handle, XPF_MC_CH_PCI_PMON_CTL2_ADDR),
                         std::make_shared<PCICFGRegister32>(handle, XPF_MC_CH_PCI_PMON_CTL3_ADDR),
-                        std::make_shared<PCICFGRegister64>(handle, XPF_MC_CH_PCI_PMON_CTR0_ADDR),
+                        std::make_shared<PCICFGRegister32>(handle, XPF_MC_CH_PCI_PMON_CTR0_ADDR),
                         std::make_shared<PCICFGRegister64>(handle, XPF_MC_CH_PCI_PMON_CTR1_ADDR),
                         std::make_shared<PCICFGRegister64>(handle, XPF_MC_CH_PCI_PMON_CTR2_ADDR),
                         std::make_shared<PCICFGRegister64>(handle, XPF_MC_CH_PCI_PMON_CTR3_ADDR),
@@ -6762,7 +6766,7 @@ void ServerPCICFGUncore::programServerUncoreMemoryMetrics(const ServerUncoreMemo
             }
             break;
         default:
-            MCCntConfig[EventPosition::READ] = MC_CH_PCI_PMON_CTL_EVENT(0x04) + MC_CH_PCI_PMON_CTL_UMASK(3);  // monitor reads on counter 0: CAS_COUNT.RD
+            MCCntConfig[EventPosition::READ] = MC_CH_PCI_PMON_CTL_EVENT(0x04) + MC_CH_PCI_PMON_CTL_UMASK(0xf);  // monitor reads AND WRITES on counter 0: CAS_COUNT.RD
             MCCntConfig[EventPosition::WRITE] = MC_CH_PCI_PMON_CTL_EVENT(0x04) + MC_CH_PCI_PMON_CTL_UMASK(12); // monitor writes on counter 1: CAS_COUNT.WR
             if (setEvents2_3(MC_CH_PCI_PMON_CTL_EVENT(0x04) + MC_CH_PCI_PMON_CTL_UMASK(2)) == false) // monitor partial writes on counter 2: CAS_COUNT.RD_UNDERFILL
             {
diff --git a/src/cpucounters.h b/src/cpucounters.h
index 11ce5f9..dd3ac58 100644
--- a/src/cpucounters.h
+++ b/src/cpucounters.h
@@ -602,7 +602,6 @@ class PCM_API PCM
     static PCM * instance;
     bool programmed_core_pmu{false};
     std::vector<std::shared_ptr<SafeMsrHandle> > MSR;
-    std::vector<std::shared_ptr<ServerPCICFGUncore> > server_pcicfg_uncore;
     std::vector<UncorePMU> pcuPMUs;
     std::vector<std::map<int32, UncorePMU> > iioPMUs;
     std::vector<std::map<int32, UncorePMU> > irpPMUs;
@@ -653,6 +652,8 @@ class PCM_API PCM
     bool linux_arch_perfmon = false;
 
 public:
+    std::vector<std::shared_ptr<ServerPCICFGUncore> > server_pcicfg_uncore;
+
     enum { MAX_C_STATE = 10 }; // max C-state on Intel architecture
 
     //! \brief Returns true if the specified core C-state residency metric is supported
diff --git a/src/pcm-caladan.cpp b/src/pcm-caladan.cpp
new file mode 100644
index 0000000..d3bd8dd
--- /dev/null
+++ b/src/pcm-caladan.cpp
@@ -0,0 +1,33 @@
+
+#include "cpucounters.h"
+
+using namespace pcm;
+
+extern "C" {
+
+	std::shared_ptr<ServerPCICFGUncore> server_pcicfg_uncore;
+	ServerPCICFGUncore *caladan_cfg;
+	PCM *cpcm;
+
+	uint32_t pcm_caladan_get_cas_count(uint32 channel)
+	{
+		return caladan_cfg->getMCCounter(channel, 0);
+	}
+
+	uint32_t pcm_caladan_get_active_channel_count(void)
+	{
+		uint32_t count = 0;
+		for (uint32_t i = 0; i < cpcm->getMCChannelsPerSocket(); i++)
+			count += pcm_caladan_get_cas_count(i) != 0;
+		return count;
+	}
+
+	int pcm_caladan_init(int socket)
+	{
+		cpcm = PCM::getInstance();
+		server_pcicfg_uncore = cpcm->server_pcicfg_uncore.at(socket);
+		caladan_cfg = server_pcicfg_uncore.get();
+		caladan_cfg->programServerUncoreMemoryMetrics(PartialWrites, -1, -1);
+		return 0;
+	}
+}
-- 
2.34.1

